--// Auto Card Picker (Tier + Buff/Debuff Priority)
-- Silent, works every selection popup

if not game:IsLoaded() then
	game.Loaded:Wait()
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local endpoints = ReplicatedStorage:WaitForChild("endpoints")
local clientToServer = endpoints:WaitForChild("client_to_server")
local serverToClient = endpoints:WaitForChild("server_to_client")

local Cards = serverToClient:WaitForChild("Cards")
local cardAction = clientToServer:WaitForChild("CardAction")

-- SETTINGS --
local tierPriority = { "Tier 3", "Tier 2", "Tier 1" } -- top to bottom
local preferType = "Debuff" -- can be "Buff" or "Debuff"

--// Choose the best card based on tier + type priority
local function chooseCard(cardList)
	local bestCard = nil
	local bestTierIndex = math.huge

	for _, card in ipairs(cardList) do
		local cardName = tostring(card.CardName or "")
		local cardType = tostring(card.CardType or "")
		local tierIndex = nil

		for i, tier in ipairs(tierPriority) do
			if string.find(cardName, tier) then
				tierIndex = i
				break
			end
		end

		if tierIndex then
			if not bestCard then
				bestCard = card
				bestTierIndex = tierIndex
			else
				local betterTier = tierIndex < bestTierIndex
				local sameTier = tierIndex == bestTierIndex
				local betterType = (preferType == cardType and preferType ~= bestCard.CardType)

				if betterTier or (sameTier and betterType) then
					bestCard = card
					bestTierIndex = tierIndex
				end
			end
		end
	end

	return bestCard
end

--// Listen for card selection events
Cards.OnClientEvent:Connect(function(action, data)
	if action == "StartSelection" and typeof(data) == "table" then
		local selected = chooseCard(data)
		if selected then
			task.wait(0.25)
			cardAction:FireServer(selected)
		end
	end
end)
