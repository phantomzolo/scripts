--// Auto Card Picker (UI Navigation Controlled)
-- Place in StarterPlayerScripts (LocalScript)

if not game:IsLoaded() then
	game.Loaded:Wait()
end

local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local endpoints = ReplicatedStorage:WaitForChild("endpoints")
local clientToServer = endpoints:WaitForChild("client_to_server")
local serverToClient = endpoints:WaitForChild("server_to_client")

local cardAction = clientToServer:WaitForChild("cardaction")

-- SETTINGS
local tierPriority = { "Tier 3", "Tier 2", "Tier 1" } -- order of preference
local preferBuffs = true -- true = Buffs, false = Debuffs

-- Keywords to identify Buff/Debuff types
local cardTypeKeywords = {
	Buff = { "Damage", "Range", "Cooldown" },
	Debuff = { "Trade Off" }
}

-- Get Buff/Debuff type by name
local function getCardType(cardName)
	cardName = string.lower(cardName)
	for _, kw in ipairs(cardTypeKeywords.Buff) do
		if string.find(cardName, string.lower(kw)) then
			return "Buff"
		end
	end
	for _, kw in ipairs(cardTypeKeywords.Debuff) do
		if string.find(cardName, string.lower(kw)) then
			return "Debuff"
		end
	end
	return nil
end

-- Simulate UI selection
local function simulateSelect()
	-- Forces UI navigation mode on
	GuiService.SelectedObject = nil
	GuiService.GuiNavigationEnabled = true

	-- Simulate a short delay before “click”
	task.wait(0.05)
	UserInputService.InputBegan:Fire({
		KeyCode = Enum.KeyCode.Return,
		UserInputType = Enum.UserInputType.Keyboard
	}, false)

	task.wait(0.05)
	UserInputService.InputEnded:Fire({
		KeyCode = Enum.KeyCode.Return,
		UserInputType = Enum.UserInputType.Keyboard
	}, false)

	-- Turn UI navigation back off
	task.wait(0.1)
	GuiService.GuiNavigationEnabled = false
end

-- Auto-pick function
local function autoPickCard(cards)
	if typeof(cards) ~= "table" then return end

	local chosenCard

	for _, tier in ipairs(tierPriority) do
		for _, card in ipairs(cards) do
			local cardName = card.name or ""
			local cardType = getCardType(cardName)

			if string.find(string.lower(cardName), string.lower(tier)) then
				if preferBuffs and cardType == "Buff" then
					chosenCard = card
					break
				elseif not preferBuffs and cardType == "Debuff" then
					chosenCard = card
					break
				end
			end
		end
		if chosenCard then break end
	end

	if chosenCard then
		-- Force UI Navigation interaction
		simulateSelect()
		-- Fire to server (actual pick)
		cardAction:FireServer(chosenCard)
	end
end

-- Detect when cards appear
serverToClient.ChildAdded:Connect(function(child)
	if child:IsA("RemoteEvent") and string.find(string.lower(child.Name), "card") then
		child.OnClientEvent:Connect(function(cardData)
			autoPickCard(cardData)
		end)
	end
end)
