local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local endpoints = ReplicatedStorage:WaitForChild("endpoints")
local clientToServer = endpoints:WaitForChild("client_to_server")
local serverToClient = endpoints:WaitForChild("server_to_client")

local Cards = serverToClient:WaitForChild("Cards")
local CardAction = clientToServer:WaitForChild("CardAction")

-- SETTINGS --
local tierPriority = { "Tier 3", "Tier 2", "Tier 1" } -- order of preference
local preferType = "Debuff" -- can be "Buff" or "Debuff"
local highlightTime = 0.25 -- how long to keep UI navigation highlight

--// Choose best card by tier + type
local function chooseCard(cards)
	local bestCard, bestTierIndex, bestType, bestIndex = nil, math.huge, nil, nil

	for index, card in ipairs(cards) do
		local cardName = tostring(card.CardName or "")
		local cardType = tostring(card.CardType or "")
		local tierIndex = nil

		for i, tier in ipairs(tierPriority) do
			if string.find(cardName, tier) then
				tierIndex = i
				break
			end
		end

		print(string.format("[AutoPicker] Card %d: %s | Type: %s | TierIndex: %s", index, cardName, cardType, tostring(tierIndex)))

		if tierIndex then
			if not bestCard then
				bestCard = card
				bestTierIndex = tierIndex
				bestType = cardType
				bestIndex = index
			else
				local betterTier = tierIndex < bestTierIndex
				local sameTier = tierIndex == bestTierIndex
				local betterType = (preferType == cardType and preferType ~= bestType)

				if betterTier or (sameTier and betterType) then
					bestCard = card
					bestTierIndex = tierIndex
					bestType = cardType
					bestIndex = index
				end
			end
		end
	end

	if bestCard then
		print(string.format("[AutoPicker] Selected: %s (Index %d, Type %s)", tostring(bestCard.CardName), bestIndex, tostring(bestCard.CardType)))
	else
		print("[AutoPicker] No valid card found!")
	end

	return bestIndex
end

--// Find the card button on PlayerGui (for visual highlight)
local function findCardButton(cardName)
	for _, gui in ipairs(playerGui:GetChildren()) do
		for _, obj in ipairs(gui:GetDescendants()) do
			if obj:IsA("TextButton") or obj:IsA("ImageButton") then
				local text = tostring(obj.Text or obj.Name or "")
				if string.find(string.lower(text), string.lower(cardName)) then
					return obj
				end
			end
		end
	end
end

--// When Cards popup from server
Cards.OnClientEvent:Connect(function(action, cardList)
	print("[AutoPicker] Cards event received:", action)
	if action ~= "StartSelection" or typeof(cardList) ~= "table" then
		print("[AutoPicker] Ignored event (not StartSelection or invalid data)")
		return
	end

	print("[AutoPicker] Card list received (" .. tostring(#cardList) .. " options)")

	local chosenIndex = chooseCard(cardList)
	if not chosenIndex then
		print("[AutoPicker] No card chosen.")
		return
	end

	local chosenCard = cardList[chosenIndex]
	local cardName = tostring(chosenCard.CardName or "")
	print("[AutoPicker] Preparing to select card:", cardName)

	-- Visual UI navigation highlight (optional)
	local button = findCardButton(cardName)
	if button then
		print("[AutoPicker] Highlighting card button...")
		local prevNav = GuiService.GuiNavigationEnabled
		GuiService.GuiNavigationEnabled = true
		GuiService.SelectedObject = button
		task.wait(highlightTime)
		GuiService.GuiNavigationEnabled = prevNav
	else
		print("[AutoPicker] Card button not found in PlayerGui (skipping highlight)")
	end

	task.wait(0.1)
	print("[AutoPicker] Firing CardAction:FireServer(" .. chosenIndex .. ")")
	CardAction:FireServer(chosenIndex)
end)
