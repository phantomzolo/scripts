-- Auto Card Selector with UI Navigation
repeat task.wait() until game:IsLoaded()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GuiService = game:GetService("GuiService")

-- Remote references
local endpoints = ReplicatedStorage:WaitForChild("endpoints")
local serverToClient = endpoints:WaitForChild("server_to_client")
local clientToServer = endpoints:WaitForChild("client_to_server")

local Cards = serverToClient:WaitForChild("Cards")
local CardAction = clientToServer:WaitForChild("CardAction")

-- preference (you can change)
local preferType = "Debuff" -- or "Debuff"

-- mapping of effect name â†’ preferred card
local cardMap = {
	["Damage Tier 1"] = "Tier 1 Buff Card",
	["Damage Tier 2"] = "Tier 2 Buff Card",
	["Damage Tier 3"] = "Tier 3 Buff Card",
	["Range Tier 1"] = "Tier 1 Buff Card",
	["Range Tier 2"] = "Tier 2 Buff Card",
	["Range Tier 3"] = "Tier 3 Buff Card",
	["Cooldown Tier 1"] = "Tier 3 Buff Card",
	["Cooldown Tier 2"] = "Tier 3 Buff Card",
	["Cooldown Tier 3"] = "Tier 3 Buff Card",
	["Debuff 1"] = "Tier 1 Trade Off",
	["Debuff 2"] = "Tier 2 Trade Off",
	["Debuff 3"] = "Tier 3 Trade Off"
}

local function selectCard(cards)
	print("[DEBUG] Selection triggered with " .. tostring(#cards) .. " cards.")
	
	local bestIndex = nil
	local bestName = nil

	for i, card in ipairs(cards) do
		if card and card.Effects and card.Effects[1] then
			local effectName = card.Effects[1].Name
			local match = cardMap[effectName]
			
			print(string.format("[DEBUG] Card %d: %s - Effect: %s", i, card.CardName, effectName))

			if match and card.CardName == match then
				if preferType == card.CardType then
					bestIndex = i
					bestName = card.CardName
					break
				elseif not bestIndex then
					bestIndex = i
					bestName = card.CardName
				end
			end
		end
	end

	if bestIndex then
		print("[DEBUG] Selected: " .. tostring(bestName) .. " (index " .. tostring(bestIndex) .. ")")

		-- enable UI navigation for highlight effect
		GuiService.GuiNavigationEnabled = true
		task.wait(0.3)
		GuiService.GuiNavigationEnabled = false

		-- send to server
		CardAction:FireServer(bestIndex)
	else
		warn("[DEBUG] No matching card found, defaulting to first.")
		CardAction:FireServer(1)
	end
end

Cards.OnClientEvent:Connect(function(eventType, data)
	if eventType == "StartSelection" then
		selectCard(data)
	end
end)
